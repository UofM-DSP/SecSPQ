package util;

import flexsc.CompEnv;
import flexsc.Flag;
import flexsc.Mode;
import flexsc.Party;

import java.util.Arrays;

//import org.apache.commons.cli.ParseException;

public abstract class GenRunnable<T> extends network.Server implements Runnable {

	Mode m;
	int port;
	protected String[] args;
	public boolean verbose = true;
	public ConfigParser config;
	public void setParameter(ConfigParser  config, String[] args) {
		this.m = Mode.getMode(config.getString("Mode"));
		this.port = config.getInt("Port");
		this.args = args;
		this.config = config;
	}

	public void setParameter(Mode m, int port) {
		this.m = m;
		this.port = port;
	}

	public abstract void prepareInput(CompEnv<T> gen) throws Exception;
	public abstract void secureCompute(CompEnv<T> gen) throws Exception;
	public abstract void prepareOutput(CompEnv<T> gen) throws Exception;


	public void run() {
		try {
			if(verbose){}
				//System.out.println("connecting");
			listen(port);
			if(verbose){}
				//System.out.println("connected");

			@SuppressWarnings("unchecked")
			CompEnv<T> env = CompEnv.getEnv(m, Party.Alice, this);

			double s = System.nanoTime();
			Flag.sw.startTotal();
			prepareInput(env);
			os.flush();
			secureCompute(env);
			os.flush();
			prepareOutput(env);
			os.flush();
			Flag.sw.stopTotal();
			double e = System.nanoTime();
			disconnect();
			if(verbose) {
				//System.out.println("Gen running time:"+(e-s)/1e9);
				//System.out.println(env.numOfAnds);
			}

		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}


	@SuppressWarnings("rawtypes")
	public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException, Exception  {
		ConfigParser config = new ConfigParser("ConfigCircuit.conf");

//        args[0] = "example.DecryptHE";
//		args[0] = "example.ArbitCircuit";
//		args[0] = "example.Millionaire";
//		args[0] = "example.HashEquality";
//		args[1] = "01011011010110101000111000100110111011001010010110001010010101110101000100101010101100101010000011010111100110101001010100001011";
//		args[1] = "5";




		args = new String[4];
		args[0] = "example.AESDecryption";
//		args[1] = "0011";	//Key
//		args[1] = "101110011011010101";	//Key
//		args[1] = "101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011";
		args[1] = "101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110";	//Key
//		args[2] = "110101011011110101";	//query
		args
//		args[2] = "110011011000011011110011101000011101101000110101101011101110000101011110000101000101011101011110011101101011011011110110110011101000000011000011011101110011101011110110011101110011101101000011000110000011110000110000000110000000000011101101110101000110110110110011000101011110011011011101110101110000";	//query
//		args[2] = "1001";	//Actual Sequence
		args[3] = "752";		//Value of k


		Class<?> clazz = Class.forName(args[0]+"$Generator");
		GenRunnable run = (GenRunnable) clazz.newInstance();
		run.setParameter(config, Arrays.copyOfRange(args, 1, args.length));
		run.run();
		if(Flag.CountTime)
			Flag.sw.print();
	}
}
