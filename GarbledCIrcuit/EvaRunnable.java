package util;

import flexsc.CompEnv;
import flexsc.Flag;
import flexsc.Mode;
import flexsc.Party;

import java.util.Arrays;

//import org.apache.commons.cli.ParseException;

public abstract  class EvaRunnable<T> extends network.Client implements Runnable {
	public abstract void prepareInput(CompEnv<T> gen) throws Exception;
	public abstract void secureCompute(CompEnv<T> gen) throws Exception;
	public abstract void prepareOutput(CompEnv<T> gen) throws Exception;
	Mode m;
	int port;
	String host;
	protected String[] args;
	public boolean verbose = true;
	public ConfigParser config;
	public void setParameter(ConfigParser config, String[] args) {
		this.m = Mode.getMode(config.getString("Mode"));
		this.port = config.getInt("Port");
		host = config.getString("Host");
		this.args = args;
		this.config = config;
	}

	public void setParameter(Mode m, String host, int port){
		this.m = m;
		this.port = port;
		this.host = host;
	}

	public void run() {
		try {
			if(verbose){}
				//System.out.println("connecting");
			connect(host, port);
			if(verbose){}
				//System.out.println("connected");

			@SuppressWarnings("unchecked")
			CompEnv<T> env = CompEnv.getEnv(m, Party.Bob, this);

			double s = System.nanoTime();
			Flag.sw.startTotal();
			prepareInput(env);
			os.flush();
			secureCompute(env);
			os.flush();
			prepareOutput(env);
			os.flush();
			Flag.sw.stopTotal();
			double e = System.nanoTime();
			disconnect();
			if(verbose){
				//System.out.println("Eva running time:"+(e-s)/1e9);
				//System.out.println("Number Of AND Gates:"+env.numOfAnds);
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	@SuppressWarnings("rawtypes")
	public static void main(String[] args) throws InstantiationException, IllegalAccessException, ClassNotFoundException {
		ConfigParser config = new ConfigParser("ConfigCircuit.conf");

		args = new String[2];
//        args[0] = "example.DecryptHE";
//		args[0] = "example.Millionaire";
//		args[0] = "example.ArbitCircuit";
//		args[0] = "example.HashEquality";
//		args[0] = "example.HammingDistanceString";

//		args[1] = "110";





//		String strKey = "0011";
//		String strKey = "101110011011010101";
//		String strKey = "101110011011010101101110011011010101101110011011010101101110011011010101101110011011010101101110011";
		String strKey
//		String strKey = "432243";

//		String binarySNPsequence = "011110011011110000101011011011101110011110011101011011110110011000000011110011000000000000110000110";
		String binarySNPsequence
//		String binarySNPsequence = "011110011011110000101011011011101110011110011101011011110110011000000011110011000000000000110000110000011110000011101110011000101110110110011101011011101011011110110000000011000101110101000000000000000101011000101101011000011000110110011011110000101000110101101110101101011011000011000110011000000101";
//		String binarySNPsequence = "110101011011110101";
//		String binarySNPsequence = "259643";

		StringBuilder encryptedSNPsequence = new StringBuilder();
		for(int i = 0; i < strKey.length(); i++)
			encryptedSNPsequence.append((char)(strKey.charAt(i) ^ binarySNPsequence.charAt(i % binarySNPsequence.length())));
		String encryptedResult = encryptedSNPsequence.toString();
		System.out.println("After XOR" + encryptedResult + "-------" + encryptedResult.length());

		args[0] = "example.AESDecryption";
		args[1] = encryptedResult;
//		args[1] = "11000000010101";
//		args[2] = "";

		Class<?> clazz = Class.forName(args[0]+"$Evaluator");
		EvaRunnable run = (EvaRunnable) clazz.newInstance();
		run.setParameter(config, Arrays.copyOfRange(args, 1, args.length));
		run.run();
		if(Flag.CountTime)
			Flag.sw.print();
		if(Flag.countIO)
			run.printStatistic();
	}
}